/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sparktest;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.mllib.recommendation.ALS;
import org.apache.spark.mllib.recommendation.MatrixFactorizationModel;
import org.apache.spark.mllib.recommendation.Rating;

import java.util.Arrays;
import java.util.List;
import java.util.function.DoubleFunction;
import java.util.regex.Pattern;

import scala.Tuple2;

/**
 * Example using MLlib ALS from Java.
 */
public final class JavaALS {

  static class ParseRating implements Function<String, Rating> {
	private static final long serialVersionUID = 1L;
	//定义正则表达式
	private static final Pattern COMMA = Pattern.compile("[^0-9]");

    @Override
    public Rating call(String line) {
      if(null == COMMA.pattern()) {
    	  System.err.println("Pattern init err...");
    	  System.exit(1);
      }
      //按正则表达式进行分割
      String[] tok = COMMA.split(line);
      int x = Integer.parseInt(tok[0]);
      int y = Integer.parseInt(tok[1]);
      double rating = Double.parseDouble(tok[2]);
      System.out.println(x+" "+y+" "+rating);
      return new Rating(x, y, rating);
    }
  }
  //String 是返回类型的；Tuple2是输入类型的
  static class FeaturesToString implements Function<Tuple2<Object, double[]>, String> {
	private static final long serialVersionUID = 1L;

	@Override
    public String call(Tuple2<Object, double[]> element) {
	  //将Tuple2的key和value拼接成一个字符串
      return element._1() + "," + Arrays.toString(element._2());
    }
  }
  
  public Double getMSE(JavaRDD<Rating> ratings, MatrixFactorizationModel model) {
	return null;
  }

  public static void main(String[] args) {
	  
    if (args.length < 4) {
      System.err.println(
        "Usage: JavaALS <ratings_file> <rank> <iterations> <output_dir> [<blocks>]"+
        "训练用的数据集路径，特征数量，迭代次数，和正则因子");
      System.exit(1);
    }
    SparkConf sparkConf = new SparkConf().setMaster("local").setAppName("JavaALS");
    int rank = Integer.parseInt(args[1]);
    int iterations = Integer.parseInt(args[2]);
    String outputDir = args[3];
    int blocks = -1;
    if (args.length == 5) {
      blocks = Integer.parseInt(args[4]);
    }

    JavaSparkContext sc = new JavaSparkContext(sparkConf);
    JavaRDD<String> lines = sc.textFile(args[0]);

    JavaRDD<Rating> ratings = lines.map(new ParseRating());
    JavaRDD<Rating>[] dataParts = ratings.randomSplit(new double[]{0.8,0.2});
    JavaRDD<Rating> trainingRDD = dataParts[0];
    JavaRDD<Rating> testRDD = dataParts[1];
    //训练用的数据集，特征数量，迭代次数，和正则因子
    MatrixFactorizationModel model = ALS.train(trainingRDD.rdd(), rank, iterations, 0.01, blocks);

    JavaRDD<String> use = model.userFeatures().toJavaRDD().map(new FeaturesToString());//.saveAsTextFile("F:\\test\\userFeatures");
    JavaRDD<String> pro = model.productFeatures().toJavaRDD().map(new FeaturesToString());//.saveAsTextFile("F:\\test\\productFeatures");
    
    List<String> uses = use.collect();
    for(String line : uses) 
    	System.out.println(line);
    
    List<String> pros = pro.collect();
    for(String line : pros) 
    	System.out.println(line);
    
    System.out.println("Final user/product features written to " + outputDir);

    sc.stop();
  }
}
